filter(datetime >= as.POSIXct('2018-10-16', tz = 'EDT') & datetime < as.POSIXct('2018-10-19',  tz = 'EDT')) %>%
gather(key = 'measures', value = 'value', -datetime)
hydro_data %>%
select(datetime, Discharge_cubic_m_per_second) %>%
filter(datetime >= as.POSIXct('2018-10-16', tz = 'EDT') & datetime < as.POSIXct('2018-10-19',  tz = 'EDT')) %>%
gather(key = 'measures', value = 'value', -datetime)
p <- hydro_data %>%
select(datetime, Discharge_cubic_m_per_second) %>%
filter(datetime >= as.POSIXct('2018-10-16', tz = 'EDT') & datetime < as.POSIXct('2018-10-19',  tz = 'EDT')) %>%
gather(key = 'measures', value = 'value', -datetime) %>%
ggplot(aes(x = datetime, y = value)) +
geom_point() + ggtitle('Hydrograph') +
# facet_wrap(~measures, scales = 'free')
# scale_x_datetime(date_labels = "%d-%H", date_breaks = "6 hour") +
scale_y_continuous(breaks = seq(0,200, by = 5))
print(p)
seq(0,200, by = 5)
hydro_data %>%
select(datetime, Discharge_cubic_m_per_second) %>%
filter(datetime >= as.POSIXct('2018-10-16', tz = 'EDT') & datetime < as.POSIXct('2018-10-19',  tz = 'EDT')) %>%
gather(key = 'measures', value = 'value', -datetime)$value
hydro_data %>%
select(datetime, Discharge_cubic_m_per_second) %>%
filter(datetime >= as.POSIXct('2018-10-16', tz = 'EDT') & datetime < as.POSIXct('2018-10-19',  tz = 'EDT')) %>%
gather(key = 'measures', value = 'value', -datetime)
hydro_data %>%
select(datetime, Discharge_cubic_m_per_second) %>%
filter(datetime >= as.POSIXct('2018-10-16', tz = 'EDT') & datetime < as.POSIXct('2018-10-19',  tz = 'EDT')) %>%
gather(key = 'measures', value = 'value', -datetime) %>%
class()
hydro_data %>%
select(datetime, Discharge_cubic_m_per_second) %>%
filter(datetime >= as.POSIXct('2018-10-16', tz = 'EDT') & datetime < as.POSIXct('2018-10-19',  tz = 'EDT')) %>%
gather(key = 'measures', value = 'value', -datetime) %>%
class(value)
hydro_data %>%
select(datetime, Discharge_cubic_m_per_second) %>%
filter(datetime >= as.POSIXct('2018-10-16', tz = 'EDT') & datetime < as.POSIXct('2018-10-19',  tz = 'EDT')) %>%
gather(key = 'measures', value = 'value', -datetime)
hydro_data %>%
select(datetime, Discharge_cubic_m_per_second) %>%
filter(datetime >= as.POSIXct('2018-10-16', tz = 'EDT') & datetime < as.POSIXct('2018-10-19',  tz = 'EDT')) %>%
gather(key = 'measures', value = 'value', -datetime)[,3]
hydro_data %>%
select(datetime, Discharge_cubic_m_per_second) %>%
filter(datetime >= as.POSIXct('2018-10-16', tz = 'EDT') & datetime < as.POSIXct('2018-10-19',  tz = 'EDT')) %>%
gather(key = 'measures', value = 'value', -datetime) %>%
select(value) %>%
class()
hydro_data %>%
select(datetime, Discharge_cubic_m_per_second) %>%
filter(datetime >= as.POSIXct('2018-10-16', tz = 'EDT') & datetime < as.POSIXct('2018-10-19',  tz = 'EDT')) %>%
gather(key = 'measures', value = 'value', -datetime) %>%
select(value)
hydro_data %>%
select(datetime, Discharge_cubic_m_per_second) %>%
filter(datetime >= as.POSIXct('2018-10-16', tz = 'EDT') & datetime < as.POSIXct('2018-10-19',  tz = 'EDT')) %>%
gather(key = 'measures', value = 'value', -datetime) %>%
ggplot(aes(x = datetime, y = value)) +
geom_point() + geom_point() + ggtitle('Hydrograph')
hydro_data %>%
select(datetime, Discharge_cubic_m_per_second) %>%
filter(datetime >= as.POSIXct('2018-10-16', tz = 'EDT') & datetime < as.POSIXct('2018-10-19',  tz = 'EDT')) %>%
gather(key = 'measures', value = 'value', -datetime) %>%
ggplot(aes(x = datetime, y = value)) +
geom_line() + geom_point() + ggtitle('Hydrograph')
hydro_data %>%
select(datetime, Discharge_cubic_m_per_second) %>%
filter(datetime >= as.POSIXct('2018-10-16', tz = 'EDT') & datetime < as.POSIXct('2018-10-19',  tz = 'EDT')) %>%
gather(key = 'measures', value = 'value', -datetime) %>%
ggplot(aes(x = datetime, y = value)) +
geom_line() + ggtitle('Hydrograph')
hydro_data %>%
select(datetime, Discharge_cubic_m_per_second) %>%
filter(datetime >= as.POSIXct('2018-10-16', tz = 'EDT') & datetime < as.POSIXct('2018-10-19',  tz = 'EDT')) %>%
gather(key = 'measures', value = 'value', -datetime, convert = T) %>%
ggplot(aes(x = datetime, y = value)) +
geom_line() + ggtitle('Hydrograph')
hydro_data %>%
select(datetime, Discharge_cubic_m_per_second) %>%
filter(datetime >= as.POSIXct('2018-10-16', tz = 'EDT') & datetime < as.POSIXct('2018-10-19',  tz = 'EDT')) %>%
gather(key = 'measures', value = 'value', -datetime, convert = F) %>%
ggplot(aes(x = datetime, y = value)) +
geom_line() + ggtitle('Hydrograph')
hydro_data %>%
select(datetime, Discharge_cubic_m_per_second) %>%
filter(datetime >= as.POSIXct('2018-10-16', tz = 'EDT') & datetime < as.POSIXct('2018-10-19',  tz = 'EDT')) %>%
gather(key = 'measures', value = 'value', -datetime, factor_key = T) %>%
ggplot(aes(x = datetime, y = value)) +
geom_line() + ggtitle('Hydrograph')
hydro_data %>%
select(datetime, Discharge_cubic_m_per_second) %>%
filter(datetime >= as.POSIXct('2018-10-16', tz = 'EDT') & datetime < as.POSIXct('2018-10-19',  tz = 'EDT')) %>%
gather(key = 'measures', value = 'value', -datetime, factor_key = F) %>%
ggplot(aes(x = datetime, y = value)) +
geom_line() + ggtitle('Hydrograph')
hydro_data %>%
mutate(Discharge_cubic_m_per_second = as.numeric(Discharge_cubic_m_per_second))
class(hydro_data$Discharge_cubic_m_per_second)
class(hydro_data$Discharge_cubic_m_per_second) <- 'numeric'
class(hydro_data$Discharge_cubic_m_per_second)
head(hydro_data)
as.numeric(as.character(hydro_data$Discharge_cubic_m_per_second))
as.character(hydro_data$Discharge_cubic_m_per_second)
hydro_data$Discharge_cubic_m_per_second
as.character(hydro_data$Discharge_cubic_m_per_second)
hydro_data <- read.csv('~/Documents/WHONDRS_48hr_Altamaha_analysis/Data/WHONDRS_48hr_Altamaha/WHONDRS_48hr_Altamaha_Hydrograph.csv', header = T, na.strings = '#VALUE!')
head(hydro_data)
hydro_data$Discharge_cubic_m_per_second
class(hydro_data$Discharge_cubic_m_per_second)
hydro_data <- read.csv('~/Documents/WHONDRS_48hr_Altamaha_analysis/Data/WHONDRS_48hr_Altamaha/WHONDRS_48hr_Altamaha_Hydrograph.csv', header = T, na.strings = '#VALUE!')
head(hydro_data)
hydro_data$datetime <- as.POSIXct(strptime(hydro_data$datetime, "%d-%B-%Y %H:%M"), tz = 'EDT')
p <- hydro_data %>%
mutate(Discharge_cubic_m_per_second = as.numeric(Discharge_cubic_m_per_second)) %>%
select(datetime, Discharge_cubic_m_per_second) %>%
filter(datetime >= as.POSIXct('2018-10-16', tz = 'EDT') & datetime < as.POSIXct('2018-10-19',  tz = 'EDT')) %>%
gather(key = 'measures', value = 'value', -datetime) %>%
ggplot(aes(x = datetime, y = value)) +
geom_line() + ggtitle('Hydrograph')
# facet_wrap(~measures, scales = 'free')
# scale_x_datetime(date_labels = "%d-%H", date_breaks = "6 hour") +
scale_y_continuous(breaks = seq(0,200, by = 5))
print(p)
p <- hydro_data %>%
select(datetime, Discharge_cubic_m_per_second, Gauge_height_meters) %>%
filter(datetime >= as.POSIXct('2018-10-16', tz = 'EDT') & datetime < as.POSIXct('2018-10-19',  tz = 'EDT')) %>%
gather(key = 'measures', value = 'value', -datetime) %>%
ggplot(aes(x = datetime, y = value)) +
geom_line() + ggtitle('Hydrograph')
facet_wrap(~measures, scales = 'free')
# scale_x_datetime(date_labels = "%d-%H", date_breaks = "6 hour") +
# scale_y_continuous(breaks = seq(0,200, by = 5))
print(p)
hydro_data %>%
select(datetime, Discharge_cubic_m_per_second, Gauge_height_meters)
hydro_data %>%
select(datetime, Discharge_cubic_m_per_second, Gauge_height_meters) %>%
filter(datetime >= as.POSIXct('2018-10-16', tz = 'EDT') & datetime < as.POSIXct('2018-10-19',  tz = 'EDT')) %>%
gather(key = 'measures', value = 'value', -datetime)
hydro_data %>%
select(datetime, Discharge_cubic_m_per_second, Gauge_height_meters) %>%
filter(datetime >= as.POSIXct('2018-10-16', tz = 'EDT') & datetime < as.POSIXct('2018-10-19',  tz = 'EDT')) %>%
gather(key = 'measures', value = 'value', -datetime)
p <- hydro_data %>%
select(datetime, Discharge_cubic_m_per_second, Gauge_height_meters) %>%
filter(datetime >= as.POSIXct('2018-10-16', tz = 'EDT') & datetime < as.POSIXct('2018-10-19',  tz = 'EDT')) %>%
gather(key = 'measures', value = 'value', -datetime) %>%
ggplot(aes(x = datetime, y = value)) +
geom_line() + ggtitle('Hydrograph') +
facet_wrap(~measures, scales = 'free')
# scale_x_datetime(date_labels = "%d-%H", date_breaks = "6 hour") +
# scale_y_continuous(breaks = seq(0,200, by = 5))
print(p)
gce7_data <- read.csv('~/Documents/WHONDRS_48hr_Altamaha_analysis/Data/WHONDRS_48hr_Altamaha/gce7_hydro_realtime_2018.csv', header = T)
gce7_data <- read.csv('~/Documents/WHONDRS_48hr_Altamaha_analysis/Data/WHONDRS_48hr_Altamaha/gce7_hydro_realtime_2018.csv', header = T, skip = 2)
head(gce7_data)
as.POSIXct(gce7_data$Date.serial.day..base.1.1.0000....GMT.datetime)
as.POSIXct(gce7_data$Date.serial.day..base.1.1.0000....GMT.datetime, origin = '0000-01-01')
as.POSIXct(gce7_data$Date.serial.day..base.1.1.0000....GMT.datetime, origin = '01-01-0000')
as.POSIXct(gce7_data$Date.serial.day..base.1.1.0000....GMT.datetime, origin = '01-01-0000')
as.POSIXct(gce7_data$Date.serial.day..base.1.1.0000....GMT.datetime, origin = '0000-01-01')
as.POSIXct(gce7_data$Date.serial.day..base.1.1.0000....GMT.datetime, origin = '0000-01-01', tz = 'GMT')
as.POSIXct(gce7_data$Date.serial.day..base.1.1.0000....GMT.datetime, origin = '1900-01-01', tz = 'GMT')
as.POSIXct(gce7_data$Date.serial.day..base.1.1.0000....GMT.datetime, origin = '2018-01-01', tz = 'GMT')
as.POSIXct((gce7_data$Date.serial.day..base.1.1.0000....GMT.datetime- 719529)*86400, origin = '1970-01-01', tz = 'UTC')
head(hydro_data)
attr(hydro_data$datetime, "tzone")  <- 'America/New_York'
head(hydro_data)
head(gce7_data)
gce7_data$Datetime <- as.POSIXct((gce7_data$Date.serial.day..base.1.1.0000....GMT.datetime- 719529)*86400, origin = '1970-01-01', tz = 'UTC')
head(gce7_data)
attr(gce7_data$Datetime, "tzone")  <- 'America/New_York'
head(gce7_data)
gce7_data <- read.csv('~/Documents/WHONDRS_48hr_Altamaha_analysis/Data/WHONDRS_48hr_Altamaha/gce7_hydro_realtime_2018.csv', header = T, skip = 2)
head(gce7_data)
gce7_data$Datetime <- as.POSIXct((gce7_data$Date.serial.day..base.1.1.0000....GMT.datetime- 719529)*86400, origin = '1970-01-01', tz = 'UTC')
attr(gce7_data$Datetime, "tzone")  <- 'EDT'
head(gce7_data)
#install.packages('Hmisc', dependencies = TRUE)
require(gdata)
require(forecast)
require(ggplot2)
require(reshape2)
require(Hmisc)
require(gridExtra)
require(forecast)
require(ncdf4)
require(ncdf4.helpers)
require(PCICt)
require(sp)
require(gstat)
require(imputeTS)
require(signal)
require(rEDM)
require(Kendall)
## linear regression
regfit_list <- c()
for(s in 1:7){
# ccm_rhos <- matrix(nrow = 14, ncol = 3)
ccm_trial <- cbind(1:420, # months
scale(ts_without_na[,s+2]), # biomass
scale(ts_precip[,station_index[s]]), # precipitation
scale(ts_temp[,station_index[s]]), # temperature
scale(pdsi_store[,3]), # pdsi
scale(surrogate_temp)) # surrogate temperature
ccm_trial <- as.data.frame(ccm_trial)
colnames(ccm_trial) <- c('month','biomass','precipitation','temperature','pdsi','sur_temp')
fit <- lm(biomass~temperature+precipitation+pdsi, data = ccm_trial)
regfit_list <- cbind(regfit_list, summary(fit)$coefficients[-1,4])
# summary(fit)$coefficients
colnames(regfit_list)[s] = paste(colnames(ts_without_na)[s+2], '\n R2 = ', formatC(x = summary(fit)$r.squared, digits = 2))
# ggplot(ccm_trial, aes(x = temperature, y = biomass)) + geom_point() + stat_smooth(method = lm)
}
ggplot(melt(log10(regfit_list), varnames = c('driver','site'), value.name = 'p_val'), aes(x = site, y = p_val, fill = driver)) +
geom_col(position = 'dodge') + ylab('log(pval)')
## linear regression
regfit_list <- c()
for(s in 1:7){
# ccm_rhos <- matrix(nrow = 14, ncol = 3)
ccm_trial <- cbind(1:420, # months
scale(ts_without_na[,s+2]), # biomass
scale(ts_precip[,station_index[s]]), # precipitation
scale(ts_temp[,station_index[s]]), # temperature
scale(pdsi_store[,3]), # pdsi
scale(surrogate_temp)) # surrogate temperature
ccm_trial <- as.data.frame(ccm_trial)
colnames(ccm_trial) <- c('month','biomass','precipitation','temperature','pdsi','sur_temp')
fit <- lm(biomass~temperature+precipitation+pdsi, data = ccm_trial)
regfit_list <- cbind(regfit_list, summary(fit)$coefficients[-1,4])
# summary(fit)$coefficients
colnames(regfit_list)[s] = paste(colnames(ts_without_na)[s+2], '\n R2 = ', formatC(x = summary(fit)$r.squared, digits = 2))
# ggplot(ccm_trial, aes(x = temperature, y = biomass)) + geom_point() + stat_smooth(method = lm)
}
ggplot(melt(log10(regfit_list), varnames = c('driver','site'), value.name = 'p_val'), aes(x = site, y = p_val, fill = driver)) +
geom_col(position = 'dodge') + ylab('log(pval)') + scale_y_sqrt()
## linear regression
regfit_list <- c()
for(s in 1:7){
# ccm_rhos <- matrix(nrow = 14, ncol = 3)
ccm_trial <- cbind(1:420, # months
scale(ts_without_na[,s+2]), # biomass
scale(ts_precip[,station_index[s]]), # precipitation
scale(ts_temp[,station_index[s]]), # temperature
scale(pdsi_store[,3]), # pdsi
scale(surrogate_temp)) # surrogate temperature
ccm_trial <- as.data.frame(ccm_trial)
colnames(ccm_trial) <- c('month','biomass','precipitation','temperature','pdsi','sur_temp')
fit <- lm(biomass~temperature+precipitation+pdsi, data = ccm_trial)
regfit_list <- cbind(regfit_list, summary(fit)$coefficients[-1,4])
# summary(fit)$coefficients
colnames(regfit_list)[s] = paste(colnames(ts_without_na)[s+2], '\n R2 = ', formatC(x = summary(fit)$r.squared, digits = 2))
# ggplot(ccm_trial, aes(x = temperature, y = biomass)) + geom_point() + stat_smooth(method = lm)
}
ggplot(melt(regfit_list, varnames = c('driver','site'), value.name = 'p_val'), aes(x = site, y = p_val, fill = driver)) +
geom_col(position = 'dodge') + ylab('log(pval)') + scale_y_log10()
## linear regression
regfit_list <- c()
for(s in 1:7){
# ccm_rhos <- matrix(nrow = 14, ncol = 3)
ccm_trial <- cbind(1:420, # months
scale(ts_without_na[,s+2]), # biomass
scale(ts_precip[,station_index[s]]), # precipitation
scale(ts_temp[,station_index[s]]), # temperature
scale(pdsi_store[,3]), # pdsi
scale(surrogate_temp)) # surrogate temperature
ccm_trial <- as.data.frame(ccm_trial)
colnames(ccm_trial) <- c('month','biomass','precipitation','temperature','pdsi','sur_temp')
fit <- lm(biomass~temperature+precipitation+pdsi, data = ccm_trial)
regfit_list <- cbind(regfit_list, summary(fit)$coefficients[-1,4])
# summary(fit)$coefficients
colnames(regfit_list)[s] = paste(colnames(ts_without_na)[s+2], '\n R2 = ', formatC(x = summary(fit)$r.squared, digits = 2))
# ggplot(ccm_trial, aes(x = temperature, y = biomass)) + geom_point() + stat_smooth(method = lm)
}
ggplot(melt(log10(regfit_list), varnames = c('driver','site'), value.name = 'p_val'), aes(x = site, y = p_val, fill = driver)) +
geom_col(position = 'dodge') + ylab('log(pval)') + scale_y_discrete()
## linear regression
regfit_list <- c()
for(s in 1:7){
# ccm_rhos <- matrix(nrow = 14, ncol = 3)
ccm_trial <- cbind(1:420, # months
scale(ts_without_na[,s+2]), # biomass
scale(ts_precip[,station_index[s]]), # precipitation
scale(ts_temp[,station_index[s]]), # temperature
scale(pdsi_store[,3]), # pdsi
scale(surrogate_temp)) # surrogate temperature
ccm_trial <- as.data.frame(ccm_trial)
colnames(ccm_trial) <- c('month','biomass','precipitation','temperature','pdsi','sur_temp')
fit <- lm(biomass~temperature+precipitation+pdsi, data = ccm_trial)
regfit_list <- cbind(regfit_list, summary(fit)$coefficients[-1,4])
# summary(fit)$coefficients
colnames(regfit_list)[s] = paste(colnames(ts_without_na)[s+2], '\n R2 = ', formatC(x = summary(fit)$r.squared, digits = 2))
# ggplot(ccm_trial, aes(x = temperature, y = biomass)) + geom_point() + stat_smooth(method = lm)
}
ggplot(melt(log10(regfit_list), varnames = c('driver','site'), value.name = 'p_val'), aes(x = site, y = p_val, fill = driver)) +
geom_col(position = 'dodge') + ylab('log(pval)') + scale_y_discrete(c('0.5', '20')
## linear regression
regfit_list <- c()
for(s in 1:7){
# ccm_rhos <- matrix(nrow = 14, ncol = 3)
ccm_trial <- cbind(1:420, # months
scale(ts_without_na[,s+2]), # biomass
scale(ts_precip[,station_index[s]]), # precipitation
scale(ts_temp[,station_index[s]]), # temperature
scale(pdsi_store[,3]), # pdsi
scale(surrogate_temp)) # surrogate temperature
ccm_trial <- as.data.frame(ccm_trial)
colnames(ccm_trial) <- c('month','biomass','precipitation','temperature','pdsi','sur_temp')
fit <- lm(biomass~temperature+precipitation+pdsi, data = ccm_trial)
regfit_list <- cbind(regfit_list, summary(fit)$coefficients[-1,4])
# summary(fit)$coefficients
colnames(regfit_list)[s] = paste(colnames(ts_without_na)[s+2], '\n R2 = ', formatC(x = summary(fit)$r.squared, digits = 2))
# ggplot(ccm_trial, aes(x = temperature, y = biomass)) + geom_point() + stat_smooth(method = lm)
}
ggplot(melt(log10(regfit_list), varnames = c('driver','site'), value.name = 'p_val'), aes(x = site, y = p_val, fill = driver)) +
geom_col(position = 'dodge') + ylab('log(pval)') + scale_y_discrete(c('0.5', '20'))
ccm_trial
nrow(ccm_trial)
420/12
p <- fticr_data %>%
filter(Pushpoint == s) %>%
select(Location, Start_time, 36:43, contains('mean')) %>% #contains('mean')) %>%
# group_by(Time, Location) %>%                                              ## calculate means
# summarise_all(list(mean = mean)) %>%                                      ## to better represent plot
# melt(id.vars = c('Time','Location'), variable.name = 'analysis') %>%
gather(key = 'analysis', value = 'value', -Start_time, -Location) %>%
group_by(Start_time, Location, analysis) %>%
summarise(meanval = mean(value), sdval = sd(value))
install.packages(c('rzmq','repr','IRkernel','IRdisplay'),
repos = c('http://irkernel.github.io/',
getOption('repos')),
type = 'source')
IRkernel::installspec(user = FALSE)
install.packages('devtools')
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec(user = FALSE)
ggplot(as.data.frame(ts_with_na), aes(x = 1:420, y = Altamaha)) + geom_line() + geom_point() +
geom_vline(xintercept = c(337,348),linetype="dashed", color = "red") + ggtitle('Altamaha Biomass TS') + xlab('Months') + ylab('g/m2')
#install.packages('Hmisc', dependencies = TRUE)
require(gdata)
require(forecast)
require(ggplot2)
require(reshape2)
require(Hmisc)
require(gridExtra)
require(forecast)
require(ncdf4)
require(ncdf4.helpers)
require(PCICt)
require(sp)
require(gstat)
require(imputeTS)
require(signal)
require(rEDM)
require(Kendall)
# import John Schalles multi site data
multi_site_biomass <- read.xls('GASpartinaTrends_read.xlsx')
# plot(multi_site_biomass[,3],multi_site_biomass[,5], xlim = c(0,1300))
# take months from date information
month <- as.numeric(substr(multi_site_biomass[,2],1,2))
# take year information and add first two digits (19XX and 20XX)
year <- substr(multi_site_biomass[,2],7,8)
year[year < 84] <- paste('20', year[year < 84], sep = '')
year[year >= 84] <- paste('19', year[year >= 84], sep = '')
year <- as.numeric(year)
## month and biomass information together (mostly used dataset after here)
multi_biom <- data.frame(cbind(year,month,multi_site_biomass[,5:11]))
# calculate means and standard deviations come up with a yearly curve
mean_shape_curve <- cbind(aggregate(multi_biom[,c(-1,-2)], by = list(multi_biom$month),function(x) c(mean(x,na.rm = T)))[,-1],
aggregate(multi_biom[,c(-1,-2)], by = list(multi_biom$month),function(x) c(sd(x,na.rm = T)))[,-1])
month <- 1:12
mean_shape_curve <- cbind(month,mean_shape_curve)
## plot yearly pattern curves
shape_melt <- cbind(melt(mean_shape_curve[,1:8],id.vars = 'month', variable.name = 'sites',value.name = 'mean'),
melt(mean_shape_curve[,c(1,9:15)],id.vars = 'month', variable.name = 'sites',value.name = 'sd')$sd)
colnames(shape_melt) <- c('month','sites','mean','sd')
head(shape_melt)
p <- ggplot(shape_melt, aes(x = month,y = mean, group = sites, color = sites)) +
geom_line() + geom_point() + #geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd), width=.2,position=position_dodge(0.05)) +
ggtitle('Biomass Patterns') + xlab('Months') + ylab('') +
scale_color_hue(labels = colnames(mean_shape_curve)[-1]) + ylab('g/m2') +
theme(legend.title = element_blank()) + scale_x_continuous(breaks=1:12)
print(p)
## dot plot of the pattern to see spread of the data
shape_melt <- melt(multi_biom[,2:8],id.vars = 'month', variable.name = 'sites',value.name = 'biomass')
p <- ggplot(shape_melt, aes(x=month, y=biomass, color = sites)) + geom_point(size = 0.75) +
ggtitle('Biomass Patterns') + xlab('Months') + ylab('') +
scale_color_hue(labels = colnames(mean_shape_curve)[-1]) + ylab('g/m2') +
theme(legend.title = element_blank()) + scale_x_continuous(breaks=1:12)
# use geom_crossbar() to add mean, sd info
p + stat_summary(fun.data="mean_sdl", fun.args = list(mult=1),
geom="crossbar", width=0.4)
############ optimized fit (this is an alternative to cover the gaps)
source('opt_fit.R')
artificial_ts <- opt_fit(multi_biom, mean_shape_curve)
############# Instead of finding a pattern and fill gaps with, we can use existing statistical methods
############# TRY EXISTING METHODS (Kalman, Arima, Krigging)
##### Start with preparing a dataset with missing data (NAs) to use in imputation (used in later imputation experiments)
ts_with_na <- c()
for(i in 1984:2018){
for(j in 1:12){
flt <- multi_biom[multi_biom[,1] == i,]
if(nrow(flt[flt[,2] == j,]) > 0){
ts_with_na <- rbind(ts_with_na,c(i,j,colMeans(flt[flt[,2] == j,3:9])))
}
else
ts_with_na <- rbind(ts_with_na,c(i,j,rep(NA,7)))
}
}
colnames(ts_with_na)[1:2] <- c('year','month')
# plot(main = 'Wassaw', multi_biom[,2]+12*(multi_biom[,1]-1984),multi_biom[,3],
#      ylim = c(0,2200), pch = 16, xlab = 'Months(1984-2018)', ylab = 'Biomass(g/m2)')
# lines(ts_with_na[,3], col = 'red', pch = 2, cex = 2) # plots consecutive points so looks incomplete
ggplot(as.data.frame(ts_with_na), aes(x = 1:420, y = Altamaha)) + geom_line() + geom_point() +
geom_vline(xintercept = c(337,348),linetype="dashed", color = "red") + ggtitle('Altamaha Biomass TS') + xlab('Months') + ylab('g/m2')
View(ts_with_na)
library(tseries)
library(rnoaa)
library(lawn)
library(sp)
library(tidyverse)
library(astsa)
library(ggfortify)
library(lubridate)
data(list = c('salmon','gas','oil'))
gas
ts.union(oil,gas,salmon)
autoplot(ts.union(oil,gas), facets = F)
salmon
frequency(salmon)
data(list = c('unemp','birth'))
autoplot(ts.union(unemp,birth), facets = F)
unemp_birth <-tibble(year = year(date_decimal(as.numeric(time(birth)))), month = month(date_decimal(as.numeric(time(birth)))),
ts.union(unemp,birth))
tail(unemp_birth)
ts.union(unemp,birth)
unemp_birth <-tibble(year = year(date_decimal(as.numeric(time(birth)))), month = month(date_decimal(as.numeric(time(birth)))),
unemp = unemp, birth = birth)
data(list = c('salmon','gas','oil'))
autoplot(ts.union(oil,gas), facets = F)
data(list = c('unemp','birth'))
autoplot(ts.union(unemp,birth), facets = F)
unemp_birth <-tibble(year = year(date_decimal(as.numeric(time(unemp)))), month = month(date_decimal(as.numeric(time(unemp)))),
unemp = unemp, birth = birth)
birth <- birth[-length(birth)]
autoplot(ts.union(unemp,birth), facets = F)
unemp_birth <- tibble(year = year(date_decimal(as.numeric(time(unemp)))), month = month(date_decimal(as.numeric(time(unemp)))),
unemp = unemp, birth = birth)
tail(unemp_birth)
birth <- birth[-length()]
birth <- birth[-length(b)]
birth <- birth[-length(birth)]
data(list = c('unemp','birth'))
birth <- birth[-length(birth)]
autoplot(ts.union(unemp,birth), facets = F)
unemp_birth <- tibble(year = year(date_decimal(as.numeric(time(unemp)))), month = month(date_decimal(as.numeric(time(unemp)))),
unemp = unemp, birth = birth)
tail(unemp_birth)
data(list = c('salmon','gas','oil','cardox'))
cardox
gas
autoplot(ts.union(cardox,salmon), facets = F)
library(tidyverse)
library(astsa)
library(ggfortify)
library(lubridate)
library(zoo)
library(reshape2)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
data(list = c('unemp','birth'))
input_ts <- unemp
unemp_data <- data.frame(year = year(as.Date(time(input_ts))), month = month(as.Date(time(input_ts))),
value = as.numeric(input_ts))
ggplot(unemp_data, aes(1:length(input_ts), value)) + geom_line()
## introduce some missing points
unemp_data$value[as.integer(runif(length(input_ts)/2, min = 1, max = length(input_ts)))] <- NA
ggplot(unemp_data, aes(1:length(input_ts), value)) + geom_line()
source('opt_fit.R')
artificial_ts <- opt_fit(unemp_data)
## plot the resulting artificial time series
artificial_ts[[1]] %>%
mutate(index = 1:nrow(artificial_ts[[1]]),
gapped = c(unemp_data$value, rep(NA,(nrow(artificial_ts[[1]])-length(unemp_data$value)))),
artificial = value) %>%
select(index, artificial, gapped) %>%
gather(key = 'metric', value = 'value', -index) %>%
ggplot(aes(x = index, y = value)) + geom_line() +
geom_point(data = data.frame(x = 1:(length(input_ts)), y = input_ts), aes(x = x, y = y), col = 2, size = 0.7) +
facet_wrap(~metric, nrow = 2)
input_ts <- birth
unemp_data <- data.frame(year = year(as.Date(time(input_ts))), month = month(as.Date(time(input_ts))),
value = as.numeric(input_ts))
ggplot(unemp_data, aes(1:length(input_ts), value)) + geom_line()
## introduce some missing points
unemp_data$value[as.integer(runif(length(input_ts)/2, min = 1, max = length(input_ts)))] <- NA
ggplot(unemp_data, aes(1:length(input_ts), value)) + geom_line()
## source and run fitting script
source('opt_fit.R')
artificial_ts <- opt_fit(unemp_data)
# # checkups
# length(as.numeric(unique(unemp_data[,1])))
# max(unemp_data[,3], na.rm = T)/min(unemp_data[,3], na.rm = T)
## plot the resulting artificial time series
artificial_ts[[1]] %>%
mutate(index = 1:nrow(artificial_ts[[1]]),
gapped = c(unemp_data$value, rep(NA,(nrow(artificial_ts[[1]])-length(unemp_data$value)))),
artificial = value) %>%
select(index, artificial, gapped) %>%
gather(key = 'metric', value = 'value', -index) %>%
ggplot(aes(x = index, y = value)) + geom_line() +
geom_point(data = data.frame(x = 1:(length(input_ts)), y = input_ts), aes(x = x, y = y), col = 2, size = 0.7) +
facet_wrap(~metric, nrow = 2)
